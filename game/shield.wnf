// cdw by "The Atari Team" 2020
// licensed under https://creativecommons.org/licenses/by-sa/2.5/[Creative Commons Licenses]

INCLUDE SH:SHIELD


// 84218421
//  x   x
// x xxx x
// x     x
// x     x
// x     x
//  xxxxx

byte array shieldRaumer[1] = [$44,$ba,$82,$82,$82,$7c]
byte shieldRaumerXpos = @RS_SHIELD_SHIP_XPOS

// TODO: vielleicht ein Batterie Symbol zeigen, sieht eher aus wie Kaffeetasse :-(
// 84218421
// xxxxxx
// x    xxx
// x xx x x
// x x xx x
// x  xxxxx
// xxxxxx

// byte array shieldRaumer[1] = [$fc,$87,$b5,$ad,$9f,$fc]

byte array pm1[1] = $FD00
byte i

procedure @initMiniRaumerInShield()
begin

  // zeichnet den MiniRaumer neben den Shield
  for i:=0 to 5 do
  begin
    pm1[223 + i] := shieldRaumer[i]
  end

  shieldRaumerXpos := 54 // 48+6
end

byte shieldDecreaser = @SHIELD_DECREASER
byte shieldDecreaseWait

byte array raumerShield[1] = $Fad8
byte array raumerShield1[1] = ["BCDEFGHIJKL"]       // 2*11 = 22
byte array raumerShield2[1] = ["BBCDDEFFGHHIJJKLL"] // 2*17 = 34
byte array raumerShield3[1] = ["BBCCDDEEFFGGHHIIJJKKLL"] // 2*22 = 44
byte array raumerShield4[1] = ["BBBCCDDDEEFFFGGHHHIIJJJKKLLL"] // 2*28 = 56
byte array raumerShield5[1] = ["BBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLL"] // 2*33 = 66
//byte array raumerShield6[1] = ["BCDEFGHIJKLAMNOPQRSTUVW"]

word array raumerShields[7] = [
0,
raumerShield1,
raumerShield2,
raumerShield3,
raumerShield4,
raumerShield5
]

byte shieldType
byte lastShieldPosition
byte value
byte pos
word address

procedure drawShieldType(address)
begin
  i:= 0
  pos := 3
  value := 'A'
  repeat
    raumerShield[pos + i] := value
    value := @getByteArray(address, i)
    i := i + 1
  until value == $FF  // sollte man wissen, ende Kennung von Strings
  lastShieldPosition := i+2 // (pos + i - 1) pos nicht vergessen!
end

procedure clearRaumerShield()
begin
  for i:=0 to 39 do
  begin
    raumerShield[i] := 'A'
  end
end

byte optionShieldSlowdown = @OPTION_SHIELD_SLOWDOWN

byte array shieldColorList[1] = [$8c,$02,$28,$18,$e8,$d8,$c8,$b8]
// byte array shieldColorList[1] =    [$8c,$02,$38,$28,$18,$e8,$d8,$c8]
byte array shieldColors[1] = @RS_SHIELD_SHIP_COLOR

procedure initShieldColor()
begin
  for i:=0 to 7 do
    shieldColors[i] := shieldColorList[i]

end

procedure @initRaumerShield(shieldType)
begin
  clearRaumerShield()
  initShieldColor()
  if shieldType == 0 then return 0

  drawShieldType(raumerShields[shieldType])

//  if shieldType == 1 then drawShieldType(adr:raumerShield1)
//  else if shieldType == 2 then drawShieldType(adr:raumerShield2)
//  else if shieldType == 3 then drawShieldType(adr:raumerShield3)
//  else if shieldType == 4 then drawShieldType(adr:raumerShield4)
//  else if shieldType == 5 then drawShieldType(adr:raumerShield5)
//  else if shieldType == 6 then drawShieldType(adr:raumerShield6)

  shieldDecreaser := 0
  shieldDecreaseWait := optionShieldSlowdown // @OPTION_SHIELD_SLOWDOWN
end

byte raumerIsInExplosion = @RAUMER_IN_EXPLOSION

procedure @raumerShieldDecrease()
begin
  shieldDecreaseWait := shieldDecreaseWait - 1
  if shieldDecreaseWait == 0 then
  begin
    shieldDecreaseWait := optionShieldSlowdown // @OPTION_SHIELD_SLOWDOWN Anpassbar, wie schnell der Shield runterfaehrt
    if shieldDecreaser != 0 then
    begin
      shieldDecreaser := shieldDecreaser - 1

      value :=raumerShield[lastShieldPosition]
      if value == 65 then
      begin
        // TODO: Es gibt keinen Shield mehr, Raumer muesste jetzt explodieren
        raumerIsInExplosion := 1
        return 0
      end

      if value <= 'L' then
      begin
        value := value + 11
        raumerShield[lastShieldPosition] := value
      end
      else
      begin
        value := 65
        raumerShield[lastShieldPosition] := value
        lastShieldPosition := lastShieldPosition - 1
      end
    end
  end
end

procedure @subFromShield(value)
begin
  shieldDecreaser := shieldDecreaser + value
end
